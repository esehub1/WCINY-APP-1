{"version":3,"sources":["../src/components/tooltip-box/tooltip-box.component.ts","../../src/models/tooltip-event.model.ts","../../src/controllers/tooltip.cotroller.ts","../../src/directives/tooltip.directive.ts","../../../src/main.ts"],"names":["TooltipBoxComponent","elementRef","rnd","_this","this","fadeState","role","tooltipStyles","init","Promise","resolve","initResolve","Object","defineProperty","prototype","side","setAttribute","getNativeElement","val","setStyle","nativeElement","ngAfterViewInit","Component","args","selector","template","animations","trigger","state","style","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Renderer2","HostBinding","Input","TooltipEvent","TooltipController","allowMultiple","activeTooltips","addTooltip","instance","hideOthers","length","hideAll","push","removeTooltip","splice","indexOf","forEach","tooltip","Injectable","providedIn","TooltipDirective","el","appRef","platform","cfr","tooltipCtrl","vcr","_active","_arrow","_canShow","_debouncedPromise","_navTooltip","debounce","desktopEvent","HOVER","duration","canShow","showTooltip","ngOnInit","event","is","mobileEvent","ngOnDestroy","_tooltipElement","destroy","tooltipHtml","show","_resetTimer","setTimeout","_createTooltipComponent","tooltipComponent","text","then","tooltipPosition","_getTooltipPosition","posLeft","left","posTop","top","arrow","arrowPosition","positionV","positionH","_tooltipTimeout","bind","onClick","CLICK","onPress","PRESS","onMouseEnter","active","onMouseLeave","componentFactory","resolveComponentFactory","createComponent","positionLeft","positionTop","tooltipNativeElement","rect","getBoundingClientRect","spacing","navTooltip","right","offsetWidth","offsetHeight","bottom","topOffset","leftOffset","width","height","clearTimeout","undefined","Directive","ApplicationRef","Platform","ComponentFactoryResolver","ViewContainerRef","HostListener","TooltipsModule","forRoot","ngModule","providers","NgModule","declarations","entryComponents","exports","imports","CommonModule"],"mappings":"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","sourcesContent":["import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  Renderer2\n} from '@angular/core';\n\n@Component({\n  selector:    'tooltip-box',\n  templateUrl: 'tooltip-box.component.html',\n  styleUrls: [\n    'tooltip-box.component.scss'\n  ],\n  animations: [\n    trigger('fade', [\n      state('visible', style({ opacity: 1 })),\n      state('invisible', style({ opacity: 0 })),\n      transition('visible <=> invisible', animate('300ms linear'))\n    ])\n  ],\n  changeDetection:ChangeDetectionStrategy.OnPush\n})\nexport class TooltipBoxComponent implements AfterViewInit {\n  private initResolve:Function;\n\n  public init:Promise<void>;\n\n  @HostBinding('@fade') fadeState:string = 'invisible';\n\n  @Input() role:string = 'status';\n  @Input() text:string;\n  @Input() tooltipHtml:string;\n  @Input() tooltipStyles:{ [key:string]:string; } = {};\n\n  @Input()\n  set arrow(side:string) {\n    this.rnd.setAttribute(\n      this.getNativeElement(),\n      'class',\n      'has-arrow ' + 'arrow-' + side\n    );\n  }\n\n  @Input()\n  set posTop(val:number) {\n    this.rnd.setStyle(\n      this.getNativeElement(),\n      'top',\n      val + 'px'\n    );\n  }\n\n  @Input()\n  set posLeft(val:number) {\n    this.rnd.setStyle(\n      this.getNativeElement(),\n      'left',\n      val + 'px'\n    );\n  }\n\n  constructor(\n    public elementRef:ElementRef,\n    private rnd:Renderer2\n  ) {\n    this.init = new Promise<void>(\n      (resolve) => {\n        this.initResolve = resolve;\n    }\n    );\n  }\n\n  getNativeElement():HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  ngAfterViewInit():void {\n    this.initResolve();\n  }\n}\n","export enum TooltipEvent {\n  CLICK = 'click',\n  HOVER = 'hover',\n  PRESS = 'press'\n}\n","import {Injectable} from '@angular/core';\nimport {TooltipDirective} from '../directives/tooltip.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TooltipController {\n  public allowMultiple:boolean = true;\n  public activeTooltips:TooltipDirective[] = [];\n\n  addTooltip(instance:TooltipDirective):void {\n    if (instance.hideOthers || !this.allowMultiple && this.activeTooltips.length > 0) {\n      this.hideAll();\n    }\n\n    this.activeTooltips.push(instance);\n  }\n\n  removeTooltip(instance:TooltipDirective):void {\n    this.activeTooltips.splice(this.activeTooltips.indexOf(instance), 1);\n  }\n\n  hideAll():void {\n    this.activeTooltips.forEach(\n      (tooltip:TooltipDirective) => {\n        tooltip.removeTooltip();\n      }\n    );\n  }\n}\n","import {\n  AfterViewInit,\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport {Platform} from '@ionic/angular';\n\nimport {TooltipBoxComponent} from '../components/tooltip-box/tooltip-box.component';\nimport {TooltipController} from '../controllers/tooltip.cotroller';\nimport {TooltipEvent} from '../models/tooltip-event.model';\n\n@Directive({\n  selector: '[tooltip]',\n})\nexport class TooltipDirective implements OnInit, AfterViewInit, OnDestroy {\n  private _active:boolean = false;\n  private _arrow:boolean = false;\n  private _canShow:boolean = true;\n  private _debouncedPromise = null;\n  private _navTooltip:boolean = false;\n  private _tooltipElement:ComponentRef<TooltipBoxComponent>;\n  private _tooltipTimeout:any;\n\n  @Input() debounce:number = 0;\n  @Input() desktopEvent:TooltipEvent = TooltipEvent.HOVER;\n  @Input() duration = 3000;\n  @Input() event:TooltipEvent;\n  @Input() hideOthers:boolean;\n  @Input() leftOffset:number;\n  @Input() mobileEvent:TooltipEvent;\n  @Input() positionV:string;\n  @Input() positionH:string;\n  @Input() role:string;\n  @Input() tooltip:string;\n  @Input() tooltipHtml:string;\n  @Input() tooltipStyles:{ [key:string]:string; } = {};\n  @Input() topOffset:number;\n\n  @Input()\n  set navTooltip(val:boolean) {\n    this._navTooltip = typeof val !== 'boolean' || val !== false;\n  }\n\n  get navTooltip():boolean {\n    return this._navTooltip;\n  }\n\n  @Input()\n  set arrow(val:boolean) {\n    this._arrow = typeof val !== 'boolean' || val !== false;\n  }\n\n  get arrow():boolean {\n    return this._arrow;\n  }\n\n  @Input()\n  set active(val:boolean) {\n    this._active = typeof val !== 'boolean' || val !== false;\n\n    this._active && this.canShow ?\n      this.showTooltip() : this.removeTooltip();\n  }\n\n  get active():boolean {\n    return this._active;\n  }\n\n  constructor(\n    private el:ElementRef,\n    private appRef:ApplicationRef,\n    private platform:Platform,\n    private cfr:ComponentFactoryResolver,\n    private tooltipCtrl:TooltipController,\n    private vcr:ViewContainerRef,\n  ) {\n\n  }\n\n  ngOnInit() {\n    if (typeof this.event === 'undefined') {\n      this.event = this.platform.is('mobile') ?\n        this.mobileEvent : this.desktopEvent;\n    }\n\n    // if the timer hasn't expired or active is true when the component gets destroyed, the tooltip will remain in the DOM\n    // this removes it\n    this.removeTooltip();\n  }\n\n  /**\n   * Show the tooltip immediately after initiating view if set to\n   */\n  ngAfterViewInit() {\n    if (this._active) {\n      this.trigger();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._tooltipElement && typeof this._tooltipElement.destroy === 'function') {\n      this._tooltipElement.destroy();\n    }\n  }\n\n  /**\n   * Set the canShow property\n   * Ensure that tooltip is shown only if the tooltip string is not falsey\n   */\n  set canShow(show: boolean) {\n    this._canShow = show;\n  }\n\n  /**\n   * @return TRUE if the tooltip can be shown\n   */\n  get canShow():boolean {\n    return this._canShow &&\n      ((typeof this.tooltip === 'string' && this.tooltip !== '')\n        || (typeof this.tooltipHtml === 'string' && this.tooltipHtml !== ''));\n  }\n\n  /**\n   * Handles the click/press event and shows a tooltip.\n   * If a tooltip already exists, it will just reset it's timer.\n   */\n  trigger():void {\n    if (this.canShow) {\n      if (this._tooltipElement) {\n        this._resetTimer();\n      } else {\n        this.showTooltip();\n      }\n    }\n  }\n\n  /**\n   * Creates a new tooltip component and adjusts it's properties to show properly.\n   */\n  showTooltip():void {\n    this._debouncedPromise = setTimeout(\n      () => {\n        this._debouncedPromise = null;\n\n        this._createTooltipComponent();\n\n        const tooltipComponent: TooltipBoxComponent = this._tooltipElement.instance;\n\n        tooltipComponent.role = this.role;\n        tooltipComponent.text = this.tooltip;\n        tooltipComponent.tooltipStyles = this.tooltipStyles;\n        tooltipComponent.tooltipHtml = this.tooltipHtml;\n        tooltipComponent.init.then(() => {\n          const tooltipPosition = this._getTooltipPosition();\n\n          tooltipComponent.posLeft = tooltipPosition.left;\n          tooltipComponent.posTop = tooltipPosition.top;\n\n          tooltipComponent.fadeState = 'visible';\n\n          if (this.arrow) {\n            let arrowPosition;\n            if (this.positionV === 'top') {\n              arrowPosition = 'bottom';\n            } else if (this.positionV === 'bottom') {\n              arrowPosition = 'top';\n            } else if (this.positionH === 'left') {\n              arrowPosition = 'right';\n            } else {\n              arrowPosition = 'left';\n            }\n            tooltipComponent.arrow = arrowPosition;\n          }\n\n          if (!this._active) {\n            this._tooltipTimeout = setTimeout(\n              this.removeTooltip.bind(this),\n              this.duration,\n            );\n          }\n        });\n      },\n      this.debounce\n    );\n  }\n\n  @HostListener('click')\n  onClick():void {\n    if (this.event === TooltipEvent.CLICK) {\n      this.trigger();\n    }\n  }\n\n  @HostListener('press')\n  onPress():void {\n    if (this.event === TooltipEvent.PRESS) {\n      this.trigger();\n    }\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter():void {\n    if (this.event === TooltipEvent.HOVER) {\n      this.active = true;\n    }\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave():void {\n    if (this.event === TooltipEvent.HOVER) {\n      this.active = false;\n    }\n  }\n\n  private _createTooltipComponent() {\n    const componentFactory = this.cfr.resolveComponentFactory(TooltipBoxComponent);\n    this._tooltipElement = this.vcr.createComponent(componentFactory);\n    this.tooltipCtrl.addTooltip(this);\n  }\n\n  private _getTooltipPosition() {\n    const tooltipNativeElement:HTMLElement = this._tooltipElement.instance.getNativeElement(),\n      el:HTMLElement = this.el.nativeElement,\n      rect:ClientRect = el.getBoundingClientRect();\n\n    let positionLeft:number,\n      positionTop:number,\n      spacing = 10;\n\n    if (this.navTooltip) {\n      this.positionV = 'bottom';\n      this.arrow = false;\n      spacing = 20;\n    }\n\n    if (this.positionH === 'right') {\n      positionLeft = rect.right + spacing;\n    } else if (this.positionH === 'left') {\n      positionLeft = rect.left - spacing - tooltipNativeElement.offsetWidth;\n      // -79, 19\n    } else if (this.navTooltip) {\n      positionLeft = rect.left + el.offsetWidth / 2;\n    } else {\n      positionLeft = rect.left;\n    }\n\n\n    if (this.positionV === 'top') {\n      positionTop = rect.top - spacing - tooltipNativeElement.offsetHeight;\n    } else if (this.positionV === 'bottom') {\n      positionTop = rect.bottom + spacing;\n    } else {\n      positionTop = rect.top + el.offsetHeight / 2 - tooltipNativeElement.offsetHeight / 2;\n    }\n\n    this.topOffset++;\n    if (this.topOffset) {\n      positionTop += +this.topOffset;\n    }\n\n    this.leftOffset++;\n    if (this.leftOffset) {\n      positionLeft += +this.leftOffset;\n    }\n\n    if (positionLeft + tooltipNativeElement.offsetWidth + spacing > this.platform.width()) {\n      positionLeft = this.platform.width() - tooltipNativeElement.offsetWidth - spacing;\n    } else if (positionLeft + tooltipNativeElement.offsetWidth - spacing < 0) {\n      positionLeft = spacing;\n    }\n\n    if (positionTop + tooltipNativeElement.offsetHeight + spacing > this.platform.height()) {\n      positionTop = this.platform.height() - tooltipNativeElement.offsetHeight - spacing;\n    } else if (positionTop + tooltipNativeElement.offsetHeight - spacing < 0) {\n      positionTop = spacing;\n    }\n\n    return {\n      left: positionLeft,\n      top:  positionTop,\n    };\n  }\n\n  removeTooltip() {\n    if (this._debouncedPromise) {\n      clearTimeout(this._debouncedPromise);\n\n      this._debouncedPromise = null;\n    }\n\n    if (!this._tooltipElement) {\n      this._tooltipElement = undefined;\n      this._tooltipTimeout = undefined;\n      return;\n    }\n\n    this._tooltipElement.instance.fadeState = 'invisible';\n\n    this.canShow = false;\n\n    // wait for animation to finish then clear everything out\n    setTimeout(\n      () => {\n        if (\n          this._tooltipElement &&\n          typeof this._tooltipElement.destroy === 'function'\n        ) {\n          this._tooltipElement.destroy();\n        }\n        this.tooltipCtrl.removeTooltip(this);\n        this._tooltipElement = this._tooltipTimeout = undefined;\n        this.canShow = true;\n      },\n      300\n    );\n  }\n\n  private _resetTimer():void {\n    clearTimeout(this._tooltipTimeout);\n    this._tooltipTimeout = setTimeout(() => {\n      this.active = false;\n    }, this.duration);\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\n/** Components **/\nexport * from './components/tooltip-box/tooltip-box.component';\n\nimport {TooltipBoxComponent} from './components/tooltip-box/tooltip-box.component';\n\n/** Controllers **/\nexport * from './controllers/tooltip.cotroller';\n\nimport {TooltipController} from './controllers/tooltip.cotroller';\n\n/** Directives **/\nexport * from './directives/tooltip.directive';\n\nimport {TooltipDirective} from './directives/tooltip.directive';\n\n@NgModule({\n  declarations: [\n    TooltipDirective,\n    TooltipBoxComponent\n  ],\n  entryComponents: [\n    TooltipBoxComponent\n  ],\n  exports: [\n    TooltipDirective\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class TooltipsModule {\n  static forRoot():ModuleWithProviders<TooltipsModule> {\n    return {\n      ngModule: TooltipsModule,\n      providers: [\n        TooltipController\n      ],\n    };\n  }\n}\n"]}